================================================================================
        COMPLETE AZURE DEPLOYMENT GUIDE FOR BEGINNERS
           WhatsApp Chatbot Deployment Tutorial
================================================================================

TABLE OF CONTENTS
=================
1. What is Deployment?
2. Understanding Docker
3. Understanding Azure
4. Azure Deployment Methods (6 Different Ways)
5. Our Deployment Method (Docker + Azure App Service)
6. Step-by-Step Deployment Guide
7. How to Update Your App
8. Troubleshooting
9. Cost Breakdown
10. Quick Reference Commands

================================================================================
SECTION 1: WHAT IS DEPLOYMENT?
================================================================================

SIMPLE EXPLANATION:
-------------------
Deployment = Making your app available on the internet 24/7

Think of it like this:
- Your Laptop = Your home kitchen (only you can access)
- Deployment = Opening a restaurant (everyone can access)

WHY DEPLOY?
-----------
✓ Your app runs 24/7 (even when your laptop is off)
✓ Anyone can access it from anywhere
✓ Reliable and fast
✓ Professional and scalable

================================================================================
SECTION 2: UNDERSTANDING DOCKER
================================================================================

WHAT IS DOCKER?
---------------
Docker = A box that contains everything your app needs to run

Imagine you're moving to a new house:
- Without Docker: Pack clothes, furniture, appliances separately (messy!)
- With Docker: Everything in one container (organized!)

DOCKER TERMS EXPLAINED:
-----------------------

1. DOCKERFILE (Recipe)
   - A file that tells Docker how to build your app container
   - Like a recipe book

   Example:
   FROM python:3.11-slim          → Start with Python
   COPY . /app                     → Copy your code
   RUN pip install requirements    → Install dependencies
   CMD ["python", "app.py"]        → Run the app

2. DOCKER IMAGE (Packed Box)
   - The actual package containing your app + all dependencies
   - Your Image = Your Code + Python + Libraries + Everything

3. DOCKER CONTAINER (Running Box)
   - A running instance of your image
   - Image = Recipe book (static)
   - Container = Cooked meal (running)

WHY DOCKER FOR DEPLOYMENT?
--------------------------
✓ Works Everywhere: "It works on my machine" → "It works everywhere!"
✓ Consistent: Same environment on your laptop and server
✓ Easy to Update: Change code → Rebuild → Deploy
✓ Isolated: Your app won't interfere with other apps

================================================================================
SECTION 3: UNDERSTANDING AZURE
================================================================================

WHAT IS AZURE?
--------------
Microsoft Azure = A huge computer center that you rent

Think of it as:
- Your Laptop = Your car (limited, you maintain it)
- Azure = Uber (always available, someone else maintains it)

KEY AZURE CONCEPTS:
-------------------

1. SUBSCRIPTION
   - Your Azure account (like a Netflix subscription)
   - You have: Azure for Students (₹7,500 free credits)

2. RESOURCE GROUP
   - A folder to organize your resources
   - Your Resource Group: whatsapp-chatbot-resources
   - Contains: App Service Plan, Web App

3. APP SERVICE
   - A place to run web apps (like renting an apartment)
   - Handles: Hosting, scaling, monitoring
   - Your App: wtbot-chatbot

4. APP SERVICE PLAN
   - The actual server/computer your app runs on
   - Your Plan: B1 Basic (1 core, 1.75 GB RAM)
   - Cost: ₹1,044/month

================================================================================
SECTION 4: AZURE DEPLOYMENT METHODS
================================================================================

METHOD 1: DIRECT CODE DEPLOYMENT (Simplest)
--------------------------------------------
Flow: Your Code → Azure (Azure builds and runs it)

PROS:
✓ Very simple for beginners
✓ No Docker knowledge needed
✓ Quick to setup

CONS:
✗ Less control over environment
✗ Harder to replicate locally
✗ Azure decides how to build

BEST FOR: Simple apps, absolute beginners

COMMAND:
az webapp up --name myapp --runtime "PYTHON:3.11"

--------------------------------------------------------------------------------

METHOD 2: GITHUB ACTIONS DEPLOYMENT (Automated)
------------------------------------------------
Flow: Your Code → GitHub → (Automatic) → Azure

PROS:
✓ Automatic deployment on git push
✓ CI/CD pipeline included
✓ Version controlled

CONS:
✗ Requires GitHub Actions knowledge
✗ Can be slow (builds on GitHub servers)
✗ Limited free minutes

BEST FOR: Team projects, frequent updates

--------------------------------------------------------------------------------

METHOD 3: AZURE CONTAINER REGISTRY (ACR) DEPLOYMENT (Azure Native)
-------------------------------------------------------------------
Flow: Your Code → Build Docker → Push to ACR → Azure pulls from ACR

PROS:
✓ Azure-native solution
✓ Fast deployment (same region)
✓ Private container registry
✓ Integrated with Azure services

CONS:
✗ Costs ₹410/month
✗ Requires ACR Tasks (not available on Azure for Students)
✗ More complex setup

BEST FOR: Enterprise apps, when budget allows

--------------------------------------------------------------------------------

METHOD 4: DOCKER HUB DEPLOYMENT ★★★ (What We Use!) ★★★
---------------------------------------------------------
Flow: Your Code → Build Docker → Push to Docker Hub → Azure pulls from Docker Hub

PROS:
✓ FREE (no extra cost)
✓ Works with Azure for Students
✓ Full control over environment
✓ Can test locally before deploying
✓ Industry standard

CONS:
✗ Requires Docker knowledge
✗ Manual deployment process
✗ Slightly slower than ACR (different region)

BEST FOR: Production apps, testing phase, budget-conscious

★★★ THIS IS WHAT WE IMPLEMENTED FOR YOU! ★★★

--------------------------------------------------------------------------------

METHOD 5: FTP DEPLOYMENT (Old School)
--------------------------------------
Flow: Your Code → Upload via FTP → Azure

PROS:
✓ Very simple (like copying files)

CONS:
✗ No automation
✗ Error-prone
✗ No version control
✗ Outdated method

BEST FOR: Small static websites only

--------------------------------------------------------------------------------

METHOD 6: ZIP DEPLOYMENT
------------------------
Flow: Your Code → Zip file → Upload to Azure → Extract and run

PROS:
✓ Simple for small apps
✓ Quick one-time deployments

CONS:
✗ No automation
✗ Manual process
✗ Not suitable for containers

BEST FOR: Quick tests, demos

================================================================================
SECTION 5: OUR DEPLOYMENT METHOD
================================================================================

WHY DOCKER HUB + AZURE APP SERVICE?
------------------------------------
We chose this because:
1. FREE - No ACR costs (saves ₹410/month)
2. RELIABLE - Docker ensures consistency
3. FLEXIBLE - Easy to test locally before deploying
4. PROFESSIONAL - Industry-standard approach
5. WORKS WITH AZURE FOR STUDENTS - No premium features required

HOW IT WORKS:
-------------

Step 1: Your Laptop
        ↓
        Write Code

Step 2: Docker Build
        ↓
        docker build -t myapp:latest
        Create Image

Step 3: Docker Hub
        ↓
        docker push gptdevansh/whatsapp-chatbot:latest
        Upload to Cloud

Step 4: Azure App Service
        ↓
        Azure pulls latest image
        Run 24/7

================================================================================
SECTION 6: STEP-BY-STEP DEPLOYMENT GUIDE
================================================================================

PREREQUISITES:
--------------
Before you start, you need:
1. ✓ Azure Account (You have: Azure for Students)
2. ✓ Docker Desktop Installed (You have: Version 28.4.0)
3. ✓ Docker Hub Account (You have: gptdevansh)
4. ✓ Azure CLI Installed (You have it)
5. ✓ Your Code Ready

--------------------------------------------------------------------------------
STEP 1: PREPARE YOUR CODE
--------------------------------------------------------------------------------

Your Project Structure:
whatsapp-chatbot/
├── chatbot-backend/       (Your Python FastAPI code)
│   ├── app/
│   ├── requirements.txt   (Python dependencies)
│   └── .env               (Environment variables)
├── chatbot-frontend/      (Your HTML/CSS/JS)
│   ├── index.html
│   ├── styles.css
│   └── js/
└── docker/
    └── Dockerfile         (Docker build instructions)

--------------------------------------------------------------------------------
STEP 2: BUILD DOCKER IMAGE LOCALLY
--------------------------------------------------------------------------------

Open Terminal and run:

cd C:\Users\Devansh\Desktop

docker build -t gptdevansh/whatsapp-chatbot:latest -f whatsapp-chatbot/docker/Dockerfile whatsapp-chatbot

BREAKING IT DOWN:
- docker build → Build a Docker image
- -t gptdevansh/whatsapp-chatbot:latest → Tag/name your image
  * gptdevansh = Your Docker Hub username
  * whatsapp-chatbot = Image name
  * latest = Version tag
- -f whatsapp-chatbot/docker/Dockerfile → Path to Dockerfile
- whatsapp-chatbot → Build context (folder with code)

Verify Image Built:
docker images

You should see:
REPOSITORY                        TAG       SIZE
gptdevansh/whatsapp-chatbot      latest    588MB

--------------------------------------------------------------------------------
STEP 3: TEST LOCALLY (Optional but Recommended)
--------------------------------------------------------------------------------

Run Container Locally:
docker run -p 8000:8000 --env-file chatbot-backend/.env gptdevansh/whatsapp-chatbot:latest

WHAT THIS DOES:
- docker run → Start a container
- -p 8000:8000 → Map port 8000 (localhost:8000 → container:8000)
- --env-file → Load environment variables
- Image name → What to run

Test in Browser:
Open: http://localhost:8000

You should see your app working!

Stop Container:
Press Ctrl + C

--------------------------------------------------------------------------------
STEP 4: PUSH TO DOCKER HUB
--------------------------------------------------------------------------------

Login to Docker Hub:
docker login -u gptdevansh

Enter your Docker Hub password when prompted.

Push Image:
docker push gptdevansh/whatsapp-chatbot:latest

WHAT HAPPENS:
- Docker uploads your image to Docker Hub
- Takes 2-5 minutes depending on size
- Image becomes available at: https://hub.docker.com/r/gptdevansh/whatsapp-chatbot

--------------------------------------------------------------------------------
STEP 5: CREATE AZURE RESOURCES
--------------------------------------------------------------------------------

Create Resource Group:
az group create --name whatsapp-chatbot-resources --location centralindia

WHAT'S A RESOURCE GROUP?
A folder to organize all your Azure resources (like a project folder).

Create App Service Plan:
az appservice plan create --name whatsapp-chatbot-plan --resource-group whatsapp-chatbot-resources --is-linux --sku B1

WHAT'S AN APP SERVICE PLAN?
The actual server/computer. B1 = 1 CPU core, 1.75 GB RAM, ₹1,044/month.

SKU OPTIONS:
- FREE (F1) = ₹0 but very limited
- SHARED (D1) = ₹800 but no persistence
- BASIC (B1) = ₹1,044 ★ WE USE THIS
- STANDARD (S1) = ₹3,000+ (overkill for testing)

--------------------------------------------------------------------------------
STEP 6: CREATE WEB APP
--------------------------------------------------------------------------------

Create App:
az webapp create --name wtbot-chatbot --resource-group whatsapp-chatbot-resources --plan whatsapp-chatbot-plan --deployment-container-image-name gptdevansh/whatsapp-chatbot:latest

WHAT THIS CREATES:
- A web app named wtbot-chatbot
- URL: https://wtbot-chatbot.azurewebsites.net
- Pulls your Docker image from Docker Hub

Configure Container Settings:
az webapp config container set --name wtbot-chatbot --resource-group whatsapp-chatbot-resources --docker-custom-image-name gptdevansh/whatsapp-chatbot:latest --docker-registry-server-url https://index.docker.io

--------------------------------------------------------------------------------
STEP 7: CONFIGURE ENVIRONMENT VARIABLES
--------------------------------------------------------------------------------

Enable Persistent Storage (So database doesn't get deleted):
az webapp config appsettings set --name wtbot-chatbot --resource-group whatsapp-chatbot-resources --settings WEBSITES_ENABLE_APP_SERVICE_STORAGE=true

Set WhatsApp Credentials:
az webapp config appsettings set --name wtbot-chatbot --resource-group whatsapp-chatbot-resources --settings META_PHONE_NUMBER_ID="747217645151179" META_ACCESS_TOKEN="YOUR_TOKEN" META_VERIFY_TOKEN="whatsapp_verify_token_12345_secure" GROQ_API_KEY="YOUR_KEY" ADMIN_USERNAME="admin" ADMIN_PASSWORD="qwertyuiop" SECRET_KEY="your_secret_key"

Set Port (Azure needs to know which port your app listens on):
az webapp config appsettings set --name wtbot-chatbot --resource-group whatsapp-chatbot-resources --settings WEBSITES_PORT=8000

--------------------------------------------------------------------------------
STEP 8: DEPLOY & RESTART
--------------------------------------------------------------------------------

Restart App:
az webapp restart --name wtbot-chatbot --resource-group whatsapp-chatbot-resources

Wait for Startup:
Wait 2-3 minutes for the container to start.

Check Status:
az webapp show --name wtbot-chatbot --resource-group whatsapp-chatbot-resources --query state

Should show: "Running"

--------------------------------------------------------------------------------
STEP 9: VERIFY DEPLOYMENT
--------------------------------------------------------------------------------

Test Health Endpoint:
Open in browser: https://wtbot-chatbot.azurewebsites.net/health

Should show:
{
  "status": "healthy",
  "service": "whatsapp-ai-backend",
  "version": "1.0.0"
}

Test Admin Login:
1. Go to: https://wtbot-chatbot.azurewebsites.net/admin/login
2. Login with: admin / qwertyuiop
3. Should see dashboard with stats

Test WhatsApp:
Send a message to your WhatsApp bot number. You should get an AI response!

================================================================================
SECTION 7: HOW TO UPDATE YOUR APP
================================================================================

WHEN YOU MAKE CODE CHANGES:
----------------------------

Step 1: Make Changes
Edit your code locally.

Step 2: Rebuild Docker Image
cd C:\Users\Devansh\Desktop
docker build -t gptdevansh/whatsapp-chatbot:latest -f whatsapp-chatbot/docker/Dockerfile whatsapp-chatbot

Step 3: Push to Docker Hub
docker push gptdevansh/whatsapp-chatbot:latest

Step 4: Restart Azure App
az webapp restart --name wtbot-chatbot --resource-group whatsapp-chatbot-resources

That's it! Azure will pull the latest image and restart.

================================================================================
SECTION 8: TROUBLESHOOTING
================================================================================

PROBLEM 1: APP NOT STARTING
----------------------------
Check Logs:
az webapp log tail --name wtbot-chatbot --resource-group whatsapp-chatbot-resources

Common Causes:
✗ Wrong port (should be 8000)
✗ Missing environment variables
✗ Docker image not found

--------------------------------------------------------------------------------

PROBLEM 2: DATABASE KEEPS RESETTING
------------------------------------
Check Setting:
az webapp config appsettings list --name wtbot-chatbot --resource-group whatsapp-chatbot-resources --query "[?name=='WEBSITES_ENABLE_APP_SERVICE_STORAGE']"

Should be true.

Fix:
az webapp config appsettings set --name wtbot-chatbot --resource-group whatsapp-chatbot-resources --settings WEBSITES_ENABLE_APP_SERVICE_STORAGE=true

--------------------------------------------------------------------------------

PROBLEM 3: WHATSAPP NOT RESPONDING
-----------------------------------
Check Token (Meta access tokens expire):
az webapp config appsettings set --name wtbot-chatbot --resource-group whatsapp-chatbot-resources --settings META_ACCESS_TOKEN="NEW_TOKEN"

Then restart:
az webapp restart --name wtbot-chatbot --resource-group whatsapp-chatbot-resources

--------------------------------------------------------------------------------

PROBLEM 4: "IMAGE NOT FOUND" ERROR
-----------------------------------
Verify Image Exists:
docker images gptdevansh/whatsapp-chatbot

Check Docker Hub:
Go to: https://hub.docker.com/r/gptdevansh/whatsapp-chatbot

Make Sure It's Public:
Docker Hub → Your Image → Settings → Make Public

================================================================================
SECTION 9: COST BREAKDOWN
================================================================================

CURRENT MONTHLY COST: ₹1,044
-----------------------------

Azure App Service (B1):  ₹1,044/month
Docker Hub (Free):       ₹0/month
Azure Storage:           ₹0/month (included in B1)
-----------------------------------------
TOTAL:                   ₹1,044/month

WITH YOUR AZURE FOR STUDENTS CREDITS:
--------------------------------------
Starting Credits:        ₹7,500
Monthly Cost:            ₹1,044
-----------------------------------------
Free Months:             ~7 months
After Credits Expire:    ₹1,044/month

COMPARISON:
-----------
                     Cost/Month
Our Method:          ₹1,044  ★ Best Value
With ACR:            ₹1,454
Free Tier:           ₹0     (But limited, data loss)

================================================================================
SECTION 10: QUICK REFERENCE COMMANDS
================================================================================

BUILD & DEPLOY:
---------------
# 1. Build
docker build -t gptdevansh/whatsapp-chatbot:latest -f whatsapp-chatbot/docker/Dockerfile whatsapp-chatbot

# 2. Push
docker push gptdevansh/whatsapp-chatbot:latest

# 3. Restart Azure
az webapp restart --name wtbot-chatbot --resource-group whatsapp-chatbot-resources

CHECK STATUS:
-------------
# App status
az webapp show --name wtbot-chatbot --resource-group whatsapp-chatbot-resources --query state

# View logs
az webapp log tail --name wtbot-chatbot --resource-group whatsapp-chatbot-resources

UPDATE SETTINGS:
----------------
# Update environment variable
az webapp config appsettings set --name wtbot-chatbot --resource-group whatsapp-chatbot-resources --settings KEY=VALUE

================================================================================
KEY TAKEAWAYS
================================================================================

WHAT YOU LEARNED:
-----------------
1. Docker = Package your app + dependencies
2. Docker Image = The package (static)
3. Docker Container = Running package (active)
4. Docker Hub = Cloud storage for images (free)
5. Azure App Service = Server to run your app
6. App Service Plan = The actual hardware (B1 = ₹1,044/month)
7. Resource Group = Folder to organize resources
8. Persistent Storage = Keep data across restarts

DEPLOYMENT FLOW:
----------------
Code → Docker Build → Docker Hub → Azure → Live App (24/7)

MONTHLY COST:
-------------
B1 App Service Only = ₹1,044/month ✓ (What you have)

YOUR DEPLOYED APP:
------------------
URL:    https://wtbot-chatbot.azurewebsites.net
Admin:  https://wtbot-chatbot.azurewebsites.net/admin/login
Docs:   https://wtbot-chatbot.azurewebsites.net/docs

================================================================================
🎉 CONGRATULATIONS! 
You now understand Azure deployment with Docker!
================================================================================

Need help? Just ask! 😊

File created: October 16, 2025
