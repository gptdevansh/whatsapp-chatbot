# Docker Compose Configuration for WhatsApp AI Chatbot
# Version: 3.8 (latest stable compose format)

services:
  # MongoDB Database Service
  mongodb:
    image: mongo:7.0
    container_name: whatsapp-chatbot-mongodb
    
    # Port mapping: host:container
    ports:
      - "27017:27017"
    
    # Volume for data persistence
    volumes:
      - mongodb_data:/data/db
    
    # Restart policy
    restart: unless-stopped
    
    # Health check for MongoDB
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    
    # Network configuration
    networks:
      - app-network

  # Backend API Service
  backend:
    # Build configuration
    build:
      context: ..
      dockerfile: docker/Dockerfile
    
    container_name: whatsapp-chatbot-backend
    
    # Port mapping: host:container
    ports:
      - "8000:8000"
    
    # Volume mounts for persistence and development
    volumes:
      # Frontend files - allows hot reload in development
      - ../chatbot-frontend:/app/frontend
    
    # Environment variables from .env file
    env_file:
      - ../chatbot-backend/.env
    
    # Override MongoDB URL for Docker environment
    environment:
      - MONGODB_URL=mongodb://mongodb:27017
      - MONGODB_DATABASE=whatsapp_chatbot
    
    # Depends on MongoDB being healthy
    depends_on:
      mongodb:
        condition: service_healthy
    
    # Restart policy: always restart unless explicitly stopped
    restart: unless-stopped
    
    # Health check configuration
    # Ensures container is healthy before routing traffic
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health', timeout=5)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    
    # Network configuration
    networks:
      - app-network

# Networks
# Bridge network for inter-container communication
networks:
  app-network:
    driver: bridge

# Named volumes
# Ensures data persistence across container lifecycle
volumes:
  mongodb_data:
    driver: local